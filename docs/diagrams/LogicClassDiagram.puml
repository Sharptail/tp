@startuml
!include style.puml
skinparam arrowThickness 2
skinparam arrowColor LOGIC_COLOR
skinparam classBackgroundColor LOGIC_COLOR

skinparam Note {
    BackgroundColor #white
}

package Logic{

package Parser as parser{
Interface Parser <<Interface>>
Class JJIMYParser
Interface ComponentParser <<Interface>>
Class CustomerParser
Class MenuParser
Class OrderParser
Class InventoryParser
Class ComponentXYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command as command {
Class ComponentXYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel<<hidden>>
}

package Storage{
Class HiddenStorage<<hidden>>
}

Class HiddenOutside<<hidden>>
HiddenOutside .down.> Logic

LogicManager -down-> "1" JJIMYParser
JJIMYParser .right.> ComponentParser: creates >
CustomerParser .up.|> ComponentParser
MenuParser .up.|> ComponentParser
OrderParser .up.|> ComponentParser
InventoryParser .up.|> ComponentParser
CustomerParser ..> ComponentXYZCommandParser: creates >
MenuParser ..> ComponentXYZCommandParser: creates >
OrderParser ..> ComponentXYZCommandParser: creates >
InventoryParser ..> ComponentXYZCommandParser: creates >

ComponentXYZCommandParser .left.> ComponentXYZCommand: creates >
ComponentXYZCommandParser .right.|> Parser : \t
ComponentXYZCommandParser ..> ArgumentMultimap
ComponentXYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
ComponentXYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
ComponentXYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix

ComponentXYZCommand -up-|> Command
Command .up.> CommandResult
LogicManager .down.> CommandResult

LogicManager .up.|> Logic
LogicManager .left.> Command : executes >

LogicManager -up-> Storage
LogicManager -down-> Model
Command .left.> Model

Logic .right.> CommandResult
@enduml
